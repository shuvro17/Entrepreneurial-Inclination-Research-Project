# -*- coding: utf-8 -*-
"""Another copy of Shuvro_DMML

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HQnJ-2gIrJWTWk5WddVQotHJEA0Cn2MH
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

data = pd.read_csv('Balanced_Dataset.csv')

print(data.columns)

data.columns = data.columns.str.strip()

print(data.columns)

data.isnull().sum()

from sklearn.preprocessing import LabelEncoder

data.columns = data.columns.str.strip()

le = LabelEncoder()

one = le.fit_transform(data['Age'])
two = le.fit_transform(data['Gender'])
three = le.fit_transform(data['Academic Year'])
four = le.fit_transform(data['Field of Study'])
five = le.fit_transform(data['How often do you procrastinate on academic tasks?'])
six = le.fit_transform(data['On average, how much time do you delay starting your academic tasks?'])
seven = le.fit_transform(data['Rate your agreement with the statement: "I often put off tasks that are important to me."'])
eight = le.fit_transform(data['I plan to take steps to start a business in the next 12 months.'])
nine = le.fit_transform(data['I intend to take steps to start a business in the next 12 months.'])
ten = le.fit_transform(data['I will try to take steps to start a business in the next 12 months.'])
eleven = le.fit_transform(data['For me, taking steps to start a business in the next 12 months would be...'])
twelve = le.fit_transform(data['For me, taking steps to start a business in the next 12 months would be....1'])
thirteen = le.fit_transform(data['For me, taking steps to start a business in the next 12 months would be....2'])
fourteen = le.fit_transform(data['For me, taking steps to start a business in the next 12 months would be....3'])
fifteen = le.fit_transform(data['For me, taking steps to start a business in the next 12 months would be....4'])
sixteen = le.fit_transform(data['For me, taking steps to start a business in the next 12 months would be....5'])
seventeen = le.fit_transform(data['My closest family members think that I should take steps to start a business in the next 12 months.'])
eighteen = le.fit_transform(data['My best friends think that I should take steps to start a business in the next 12 months.'])
nineteen = le.fit_transform(data['People who are important to me think that I should take steps to start a business in the next 12 months.'])
twenty = le.fit_transform(data['If I wanted to, I could take steps to start a business in the next 12 months.'])
twenty_one = le.fit_transform(data['If I took steps to start a business in the next 12 months, I would be able to control the progress myself.'])
twenty_two = le.fit_transform(data['It would be easy for me to take steps to start a business in the next 12 months.'])
twenty_three = le.fit_transform(data['If I wanted to take steps to start a business in the next 12 months, no external factor, independent of myself, would stop me in taking such action.'])
twenty_four = le.fit_transform(data['How much effort have you applied to activities aimed at starting a business in the last 12 months?'])
twenty_five = le.fit_transform(data['How much time have you spent on activities aimed at starting a business in the last 12 months?'])
twenty_six = le.fit_transform(data['How much money have you invested in activities aimed at starting a business in the last 12 months? Specify the amount in dollars.'])

data['Age'] = one
data['Gender'] = two
data['Academic Year'] = three
data['Field of Study'] = four
data['How often do you procrastinate on academic tasks?'] = five
data['On average, how much time do you delay starting your academic tasks?'] = six
data['Rate your agreement with the statement: "I often put off tasks that are important to me."'] = seven
data['I plan to take steps to start a business in the next 12 months.'] = eight
data['I intend to take steps to start a business in the next 12 months.'] = nine
data['I will try to take steps to start a business in the next 12 months.'] = ten
data['For me, taking steps to start a business in the next 12 months would be...'] = eleven
data['For me, taking steps to start a business in the next 12 months would be....1'] = twelve
data['For me, taking steps to start a business in the next 12 months would be....2'] = thirteen
data['For me, taking steps to start a business in the next 12 months would be....3'] = fourteen
data['For me, taking steps to start a business in the next 12 months would be....4'] = fifteen
data['For me, taking steps to start a business in the next 12 months would be....5'] = sixteen
data['My closest family members think that I should take steps to start a business in the next 12 months.'] = seventeen
data['My best friends think that I should take steps to start a business in the next 12 months.'] = eighteen
data['People who are important to me think that I should take steps to start a business in the next 12 months.'] = nineteen
data['If I wanted to, I could take steps to start a business in the next 12 months.'] = twenty
data['If I took steps to start a business in the next 12 months, I would be able to control the progress myself.'] = twenty_one
data['It would be easy for me to take steps to start a business in the next 12 months.'] = twenty_two
data['If I wanted to take steps to start a business in the next 12 months, no external factor, independent of myself, would stop me in taking such action.'] = twenty_three
data['How much effort have you applied to activities aimed at starting a business in the last 12 months?'] = twenty_four
data['How much time have you spent on activities aimed at starting a business in the last 12 months?'] = twenty_five
data['How much money have you invested in activities aimed at starting a business in the last 12 months? Specify the amount in dollars.'] = twenty_six

from imblearn.over_sampling import SMOTE

Xx = data.drop(columns=['I plan to take steps to start a business in the next 12 months.'])
Yy = data['I plan to take steps to start a business in the next 12 months.']


smote = SMOTE()
X_res, y_res = smote.fit_resample(Xx, Yy)


print("Class distribution after SMOTE:")
print(pd.Series(y_res).value_counts())


balanced_data = pd.DataFrame(X_res, columns=Xx.columns)
balanced_data['I plan to take steps to start a business in the next 12 months.'] = y_res
balanced_data.to_csv('balanced_dataset.csv', index=False)

data.isnull().sum()



import matplotlib.pyplot as plt

column_name = 'I plan to take steps to start a business in the next 12 months.'
data[column_name].value_counts().plot(kind='barh')

yticks_labels = ['Strongly Disagree', 'Disagree', 'Somewhat Disagree', 'Somewhat Agree', 'Agree', 'Strongly Agree']
plt.yticks(ticks=range(len(yticks_labels)), labels=yticks_labels)

plt.xlabel('Counts')
plt.ylabel('Planning to start busniess in next 12 months.')
plt.show()

data

correlations = data.corr()
target_corr = data.corrwith(data['I plan to take steps to start a business in the next 12 months.'])
target_corr_sorted = target_corr.sort_values(ascending=False)
print(target_corr_sorted)

features = [

    'Rate your agreement with the statement: "I often put off tasks that are important to me."',
    'I intend to take steps to start a business in the next 12 months.',
    'I will try to take steps to start a business in the next 12 months.',
    'For me, taking steps to start a business in the next 12 months would be...',
    'For me, taking steps to start a business in the next 12 months would be....1',
    'For me, taking steps to start a business in the next 12 months would be....4',
    'For me, taking steps to start a business in the next 12 months would be....5',
    'My closest family members think that I should take steps to start a business in the next 12 months.',
    'My best friends think that I should take steps to start a business in the next 12 months.',
    'People who are important to me think that I should take steps to start a business in the next 12 months.',
    'If I wanted to, I could take steps to start a business in the next 12 months.',
    'If I took steps to start a business in the next 12 months, I would be able to control the progress myself.',
    'It would be easy for me to take steps to start a business in the next 12 months.',
    'If I wanted to take steps to start a business in the next 12 months, no external factor, independent of myself, would stop me in taking such action.',
    'How much time have you spent on activities aimed at starting a business in the last 12 months?'

]

from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import chi2
from sklearn.feature_selection import mutual_info_classif

x = data[features]

y = data['I plan to take steps to start a business in the next 12 months.']

from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import chi2

sk=SelectKBest(score_func=chi2)

sk.fit_transform(x,y)

sk.scores_

from sklearn.model_selection import train_test_split

xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.2,random_state=0)

from sklearn.tree import DecisionTreeClassifier

dt=DecisionTreeClassifier()

dt.fit(xtrain,ytrain)

dt.predict(xtest)

from sklearn.metrics import accuracy_score,classification_report,confusion_matrix

accuracy_score(ytest,dt.predict(xtest))

print(classification_report(ytest,dt.predict(xtest)))

confusion_matrix(ytest,dt.predict(xtest))

from sklearn.datasets import load_iris
from sklearn.model_selection import cross_val_score

data = load_iris()
x, y = data.data, data.target

from sklearn.ensemble import RandomForestClassifier

rf=RandomForestClassifier()

rf.fit(xtrain,ytrain)

rf.predict(xtest)

from sklearn.metrics import accuracy_score,classification_report,confusion_matrix

accuracy_score(ytest,rf.predict(xtest))

print(classification_report(ytest,rf.predict(xtest)))

import pandas as pd


feature_importances = pd.DataFrame({'Feature': xtrain.columns, 'Importance': rf.feature_importances_})

feature_importances = feature_importances.sort_values(by='Importance', ascending=False)

print(feature_importances.head(15))

from sklearn.neighbors import KNeighborsClassifier

knn=KNeighborsClassifier()

knn.fit(xtrain,ytrain)

knn.predict(xtest)

from sklearn.metrics import accuracy_score,classification_report,confusion_matrix

accuracy_score(ytest,knn.predict(xtest))

print(classification_report(ytest,knn.predict(xtest)))

confusion_matrix(ytest,knn.predict(xtest))

from sklearn.model_selection import cross_val_score
from sklearn.datasets import load_iris

data = load_iris()
x, y = data.data, data.target

cv_scores = cross_val_score(knn, x, y, cv=2)

cv_scores

cv_scores.mean()

from sklearn.naive_bayes import GaussianNB

nb=GaussianNB()

nb.fit(xtrain, ytrain)

nb.predict(xtest)

accuracy_score(ytest, nb.predict(xtest))

from sklearn.svm import SVC

model = SVC(kernel='linear', random_state=0)
model.fit(xtrain, ytrain)

model.predict(xtest)

accuracy_score(ytest, model.predict(xtest))

cv_score = cross_val_score(model, x, y, cv=5, scoring='accuracy')
cv_score
cv_score.mean()

from sklearn.linear_model import LogisticRegression

lgr = LogisticRegression(random_state=0, max_iter=1000)

lgr.fit(xtrain, ytrain)

lgr.predict(xtest)

accuracy_score(ytest, lgr.predict(xtest))

pip install lime

import lime
import lime.lime_tabular

lime_explainer = lime.lime_tabular.LimeTabularExplainer(training_data=np.array(xtrain), feature_names=xtrain.columns,
            class_names=['0','1'], mode='classification')

explain=lime_explainer.explain_instance(data_row=xtest.iloc[1], predict_fn=rf.predict_proba)
explain.show_in_notebook()